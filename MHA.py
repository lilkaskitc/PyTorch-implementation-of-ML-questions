# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y26ZOuT96i7uA5hh_8UwDOEBoi54v-Q1
"""

import torch
import torch.nn as nn
import torch.nn.functional as F

class MultiHeadAttention(nn.Module):
    def __init__(self, embed_dim, num_heads, dropout=0.0):
        super(MultiHeadAttention, self).__init__()
        assert embed_dim % num_heads == 0, "embed_dim must be divisible by num_heads"

        self.embed_dim = embed_dim
        self.num_heads = num_heads
        self.head_dim = embed_dim // num_heads

        # Linear layers for queries, keys, and values
        self.W_q = nn.Linear(embed_dim, embed_dim)
        self.W_k = nn.Linear(embed_dim, embed_dim)
        self.W_v = nn.Linear(embed_dim, embed_dim)

        # Output projection
        self.W_o = nn.Linear(embed_dim, embed_dim)

        self.dropout = nn.Dropout(dropout)

    def forward(self, query, key, value, mask=None):
        """
        query: (batch_size, seq_len, embed_dim)
        key:   (batch_size, seq_len, embed_dim)
        value: (batch_size, seq_len, embed_dim)
        mask:  (batch_size, 1, 1, seq_len) or (batch_size, num_heads, seq_len, seq_len)
        """
        B, L, D = query.shape
        H = self.num_heads
        d_k = self.head_dim

        # Linear projections
        Q = self.W_q(query)  # (B, L, D)
        K = self.W_k(key)
        V = self.W_v(value)

        # Split into heads and transpose for attention computation
        Q = Q.view(B, L, H, d_k).transpose(1, 2)  # (B, H, L, d_k)
        K = K.view(B, L, H, d_k).transpose(1, 2)
        V = V.view(B, L, H, d_k).transpose(1, 2)

        # Scaled dot-product attention
        scores = torch.matmul(Q, K.transpose(-2, -1)) / (d_k ** 0.5)  # (B, H, L, L)

        if mask is not None:
            scores = scores.masked_fill(mask == 0, float('-inf'))

        attn = F.softmax(scores, dim=-1)
        attn = self.dropout(attn)

        context = torch.matmul(attn, V)  # (B, H, L, d_k)

        # Combine heads
        context = context.transpose(1, 2).contiguous().view(B, L, D)  # (B, L, D)

        # Final linear layer
        out = self.W_o(context)  # (B, L, D)

        return out, attn

# Example: random input to check correctness
torch.manual_seed(42)

embed_dim = 64
num_heads = 8
seq_len = 10
batch_size = 2

x = torch.randn(batch_size, seq_len, embed_dim)

mha = MultiHeadAttention(embed_dim, num_heads, dropout=0.1)
out, attn = mha(x, x, x)

print("Output shape:", out.shape)   # (batch_size, seq_len, embed_dim)
print("Attention shape:", attn.shape)  # (batch_size, num_heads, seq_len, seq_len)